<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('User', 'core');

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property varchar $username
 * @property varchar $email
 * @property string $algorithm
 * @property string $salt
 * @property string $password
 * @property string $lab
 * @property string $location
 * @property string $phone
 * @property Doctrine_Collection $Groups
 * @property Doctrine_Collection $UserGroup
 * @property Doctrine_Collection $Credential
 * @property Doctrine_Collection $UserCredential
 * @property Doctrine_Collection $YeastStrains
 * @property Doctrine_Collection $WormStrains
 * @property Doctrine_Collection $MouseStrains
 * @property Doctrine_Collection $Reagents
 * @property Doctrine_Collection $Equipments
 * @property Doctrine_Collection $Skills
 * 
 * @method integer             getId()             Returns the current record's "id" value
 * @method varchar             getUsername()       Returns the current record's "username" value
 * @method varchar             getEmail()          Returns the current record's "email" value
 * @method string              getAlgorithm()      Returns the current record's "algorithm" value
 * @method string              getSalt()           Returns the current record's "salt" value
 * @method string              getPassword()       Returns the current record's "password" value
 * @method string              getLab()            Returns the current record's "lab" value
 * @method string              getLocation()       Returns the current record's "location" value
 * @method string              getPhone()          Returns the current record's "phone" value
 * @method Doctrine_Collection getGroups()         Returns the current record's "Groups" collection
 * @method Doctrine_Collection getUserGroup()      Returns the current record's "UserGroup" collection
 * @method Doctrine_Collection getCredential()     Returns the current record's "Credential" collection
 * @method Doctrine_Collection getUserCredential() Returns the current record's "UserCredential" collection
 * @method Doctrine_Collection getYeastStrains()   Returns the current record's "YeastStrains" collection
 * @method Doctrine_Collection getWormStrains()    Returns the current record's "WormStrains" collection
 * @method Doctrine_Collection getMouseStrains()   Returns the current record's "MouseStrains" collection
 * @method Doctrine_Collection getReagents()       Returns the current record's "Reagents" collection
 * @method Doctrine_Collection getEquipments()     Returns the current record's "Equipments" collection
 * @method Doctrine_Collection getSkills()         Returns the current record's "Skills" collection
 * @method User                setId()             Sets the current record's "id" value
 * @method User                setUsername()       Sets the current record's "username" value
 * @method User                setEmail()          Sets the current record's "email" value
 * @method User                setAlgorithm()      Sets the current record's "algorithm" value
 * @method User                setSalt()           Sets the current record's "salt" value
 * @method User                setPassword()       Sets the current record's "password" value
 * @method User                setLab()            Sets the current record's "lab" value
 * @method User                setLocation()       Sets the current record's "location" value
 * @method User                setPhone()          Sets the current record's "phone" value
 * @method User                setGroups()         Sets the current record's "Groups" collection
 * @method User                setUserGroup()      Sets the current record's "UserGroup" collection
 * @method User                setCredential()     Sets the current record's "Credential" collection
 * @method User                setUserCredential() Sets the current record's "UserCredential" collection
 * @method User                setYeastStrains()   Sets the current record's "YeastStrains" collection
 * @method User                setWormStrains()    Sets the current record's "WormStrains" collection
 * @method User                setMouseStrains()   Sets the current record's "MouseStrains" collection
 * @method User                setReagents()       Sets the current record's "Reagents" collection
 * @method User                setEquipments()     Sets the current record's "Equipments" collection
 * @method User                setSkills()         Sets the current record's "Skills" collection
 * 
 * @package    core
 * @subpackage model
 * @author     Brady Olsen
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('username', 'varchar', 128, array(
             'type' => 'varchar',
             'notnull' => true,
             'unique' => true,
             'length' => 128,
             ));
        $this->hasColumn('email', 'varchar', 128, array(
             'type' => 'varchar',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('algorithm', 'string', 128, array(
             'type' => 'string',
             'default' => 'sha1',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('salt', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('password', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('lab', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('location', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('phone', 'string', 32, array(
             'type' => 'string',
             'length' => 32,
             ));

        $this->option('type', 'INNODB');
        $this->option('charset', 'utf8');
        $this->option('collate', 'utf8_unicode_ci');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Group as Groups', array(
             'refClass' => 'UserGroup',
             'local' => 'user_id',
             'foreign' => 'group_id'));

        $this->hasMany('UserGroup', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Credential', array(
             'refClass' => 'UserCredential',
             'local' => 'user_id',
             'foreign' => 'credential_id'));

        $this->hasMany('UserCredential', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('YeastStrain as YeastStrains', array(
             'local' => 'username',
             'foreign' => 'owner'));

        $this->hasMany('WormStrain as WormStrains', array(
             'local' => 'username',
             'foreign' => 'owner'));

        $this->hasMany('MouseStrain as MouseStrains', array(
             'local' => 'username',
             'foreign' => 'owner'));

        $this->hasMany('Reagent as Reagents', array(
             'local' => 'username',
             'foreign' => 'owner'));

        $this->hasMany('Equipment as Equipments', array(
             'local' => 'username',
             'foreign' => 'owner'));

        $this->hasMany('Skill as Skills', array(
             'local' => 'username',
             'foreign' => 'owner'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}